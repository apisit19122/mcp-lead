import { McpError, ErrorCode, CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tool Definition
 */
export interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: {
    type: 'object';
    properties: Record<string, any>;
    required: string[];
  };
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tool Response
 */
export type ToolResponse = CallToolResult;

/**
 * Base class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MCP Tools
 * ‡∏ó‡∏∏‡∏Å tool ‡∏Ñ‡∏ß‡∏£‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å class ‡∏ô‡∏µ‡πâ
 */
export abstract class BaseTool<T = any> {
  /**
   * ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á tool
   */
  abstract readonly name: string;

  /**
   * ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á tool
   */
  abstract readonly description: string;

  /**
   * Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input parameters
   */
  abstract readonly inputSchema: {
    type: 'object';
    properties: Record<string, any>;
    required: string[];
  };

  /**
   * Zod schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation (optional)
   * ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô validateArgs ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
   */
  protected zodSchema?: z.ZodSchema<T>;

  /**
   * ‡πÑ‡∏î‡πâ tool definition ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
   */
  getDefinition(): ToolDefinition {
    return {
      name: this.name,
      description: this.description,
      inputSchema: this.inputSchema,
    };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á arguments ‡∏î‡πâ‡∏ß‡∏¢ Zod (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ fallback validation
   */
  protected validateArgs(args: any): T {
    if (this.zodSchema) {
      return this.validateWithZod(args);
    }
    
    // Fallback validation ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    this.validateArgsLegacy(args);
    return args as T;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Zod schema
   */
  private validateWithZod(args: any): T {
    try {
      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ Zod ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tool: ${this.name}`);
      const result = this.zodSchema!.parse(args);
      console.log(`‚úÖ ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Zod`);
      return result;
    } catch (error) {
      if (error instanceof z.ZodError) {
        const errorMessages = error.errors.map((err: any) => 
          `${err.path.join('.')}: ${err.message}`
        ).join(', ');
        
        console.error(`‚ùå Zod validation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorMessages}`);
        
        throw new McpError(
          ErrorCode.InvalidParams,
          `‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errorMessages}`
        );
      }
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á arguments ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (legacy)
   */
  private validateArgsLegacy(args: any): void {
    if (!args || typeof args !== 'object') {
      throw new McpError(
        ErrorCode.InvalidParams,
        '‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô object'
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
    const required = this.inputSchema.required || [];
    for (const field of required) {
      if (!(field in args)) {
        throw new McpError(
          ErrorCode.InvalidParams,
          `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${field}`
        );
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ property
    const properties = this.inputSchema.properties;
    for (const [key, value] of Object.entries(args)) {
      if (key in properties) {
        const expectedType = properties[key].type;
        const actualType = typeof value;
        
        if (expectedType === 'number' && actualType !== 'number') {
          throw new McpError(
            ErrorCode.InvalidParams,
            `‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ${key} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç`
          );
        }
        
        if (expectedType === 'string' && actualType !== 'string') {
          throw new McpError(
            ErrorCode.InvalidParams,
            `‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ${key} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string`
          );
        }
        
        if (expectedType === 'boolean' && actualType !== 'boolean') {
          throw new McpError(
            ErrorCode.InvalidParams,
            `‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ${key} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô boolean`
          );
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö enum values
        if (properties[key].enum && !properties[key].enum.includes(value)) {
          throw new McpError(
            ErrorCode.InvalidParams,
            `‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ${key} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô: ${properties[key].enum.join(', ')}`
          );
        }
      }
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
   */
  protected createResponse(text: string): ToolResponse {
    return {
      content: [
        {
          type: 'text',
          text,
        },
      ],
    };
  }

  /**
   * Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á tool
   * ‡∏ï‡πâ‡∏≠‡∏á implement ‡πÉ‡∏ô subclass
   */
  abstract execute(args: T): Promise<ToolResponse> | ToolResponse;

  /**
   * Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ tool ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  async call(args: any): Promise<ToolResponse> {
    try {
      console.log(`üîß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ tool: ${this.name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå:`, args);
      
      const validatedArgs = this.validateArgs(args);
      const result = await this.execute(validatedArgs);
      
      console.log(`‚úÖ tool ${this.name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô tool ${this.name}:`, error);
      
      if (error instanceof McpError) {
        throw error;
      }
      
      throw new McpError(
        ErrorCode.InternalError,
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÉ‡∏ô tool ${this.name}: ${error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`
      );
    }
  }
}
