import { BaseTool, ToolResponse } from './base-tool.js';
import { ExampleToolArgs, ExampleToolArgsSchema } from '../types.js';

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Tool ‡πÉ‡∏´‡∏°‡πà - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô template ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á tool
 * ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á tool ‡πÉ‡∏´‡∏°‡πà
 */
export class ExampleTool extends BaseTool<ExampleToolArgs> {
  readonly name = 'example';
  readonly description = '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á tool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô template';
  readonly inputSchema = {
    type: 'object' as const,
    properties: {
      message: {
        type: 'string',
        description: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•',
      },
      count: {
        type: 'number',
        description: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ã‡πâ‡∏≥',
        minimum: 1,
        maximum: 10,
      },
    },
    required: ['message'],
  };

  // ‡πÉ‡∏ä‡πâ Zod schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
  protected zodSchema = ExampleToolArgsSchema;

  /**
   * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Example Tool
   */
  execute(args: ExampleToolArgs): ToolResponse {
    const { message, count = 1 } = args;
    
    console.log(`üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
    
    const results = Array.from({ length: count }, (_, i) => 
      `${i + 1}. ${message}`
    ).join('\n');
    
    return this.createResponse(`‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n${results}`);
  }
}

/*
‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô tool ‡∏ô‡∏µ‡πâ:

1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô tool-registry.ts:
   import { ExampleTool } from './example-tool.js';
   
   // ‡πÉ‡∏ô registerDefaultTools():
   this.registerTool(new ExampleTool());

2. ‡πÄ‡∏û‡∏¥‡πà‡∏° export ‡πÉ‡∏ô index.ts:
   export { ExampleTool } from './example-tool.js';

3. ‡πÄ‡∏û‡∏¥‡πà‡∏° type definition ‡πÉ‡∏ô types.ts (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô):
   export interface ExampleToolArgs {
     message: string;
     count?: number;
   }
*/
